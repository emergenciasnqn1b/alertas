name: Alerta Meteorol√≥gica Autom√°tica

on:
  schedule:
    - cron: '*/30 * * * *'  # Cada 30 minutos
  workflow_dispatch:

jobs:
  alerta-meteorologica:
    runs-on: ubuntu-latest

    steps:
      - name: Instalar dependencias
        run: pip install requests beautifulsoup4 shapely folium lxml

      - name: Ejecutar verificador de alertas
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
        run: |
          python <<EOF
          import requests
          from bs4 import BeautifulSoup
          from shapely.geometry import Point, Polygon
          from email.message import EmailMessage
          import smtplib
          import folium
          import os

          ciudades = {
              "Chos Malal": (-37.377, -70.270),
              "Andacollo": (-37.15, -70.983),
              "Loncopu√©": (-38.066, -70.616),
              "Las Lajas": (-38.517, -70.375),
              "Alumin√©": (-39.233, -71.417),
              "Jun√≠n de los Andes": (-39.950, -71.083),
              "San Mart√≠n de los Andes": (-40.157, -71.353),
              "Chapelco": (-40.075, -71.137),
              "Bariloche": (-41.133, -71.310),
          }

          GMAIL_USER = os.environ.get("GMAIL_USER")
          GMAIL_PASS = os.environ.get("GMAIL_PASS")

          feed_url = "https://ssl.smn.gob.ar/CAP/AR.php"
          feed_resp = requests.get(feed_url)
          feed = BeautifulSoup(feed_resp.content, "xml")

          alert_links = []
          descripciones_feed = {}

          for item in feed.find_all("item"):
              link_tag = item.find("link")
              desc_tag = item.find("description")
              if link_tag and desc_tag:
                  link = link_tag.text.strip()
                  descripcion = desc_tag.text.strip()
                  alert_links.append(link)
                  descripciones_feed[link] = descripcion

          for xml_url in alert_links:
              print(f"Procesando: {xml_url}")
              xml = requests.get(xml_url)
              xml_soup = BeautifulSoup(xml.content, "xml")

              event = xml_soup.find("event")
              evento = event.text if event else "Alerta"

              mapa = folium.Map(location=[-40, -70], zoom_start=5, tiles="CartoDB positron")
              poligono_afecta_ciudad = False
              ciudad_afectada = None

              for area in xml_soup.find_all("area"):
                  polygon_tag = area.find("polygon")
                  if polygon_tag and polygon_tag.text.strip():
                      try:
                          coords = []
                          for pair in polygon_tag.text.strip().split():
                              lat, lon = map(float, pair.split(','))
                              coords.append((lat, lon))

                          if len(coords) >= 3:
                              poligono = Polygon([(lon, lat) for lat, lon in coords])
                              folium.Polygon(
                                  locations=coords,
                                  color="red",
                                  fill=True,
                                  fill_opacity=0.4,
                                  tooltip=evento
                              ).add_to(mapa)

                              for ciudad, (lat, lon) in ciudades.items():
                                  punto = Point(lon, lat)
                                  if poligono.contains(punto):
                                      ciudad_afectada = ciudad
                                      poligono_afecta_ciudad = True
                      except Exception as e:
                          print(f"Error procesando pol√≠gono: {e}")

              if poligono_afecta_ciudad:
                  for nombre, (lat, lon) in ciudades.items():
                      folium.Marker(
                          location=(lat, lon),
                          popup=nombre,
                          tooltip=nombre,
                          icon=folium.Icon(color="blue", icon="info-sign")
                      ).add_to(mapa)

                  mapa.save("mapa_alerta.html")
                  with open("mapa_alerta.html", "r", encoding="utf-8") as f:
                      html_mapa = f.read()

                  descripcion_extra = descripciones_feed.get(xml_url, "(Sin descripci√≥n adicional)")

                  mensaje = EmailMessage()
                  mensaje["Subject"] = f"üö® {evento} en {ciudad_afectada}"
                  mensaje["From"] = GMAIL_USER
                  mensaje["To"] = GMAIL_USER
                  mensaje.set_content(f"Se detect√≥ una alerta meteorol√≥gica que afecta a {ciudad_afectada}.\n\nDescripci√≥n:\n{descripcion_extra}\n\nEl mapa se incluye en la versi√≥n HTML del correo.")
                  mensaje.add_alternative(f"""
                  <html>
                    <body>
                      <p><strong>Se detect√≥ una alerta meteorol√≥gica que afecta a {ciudad_afectada}.</strong></p>
                      <p><strong>Descripci√≥n:</strong><br>{descripcion_extra}</p>
                      {html_mapa}
                    </body>
                  </html>
                  """, subtype="html")

                  try:
                      with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
                          smtp.login(GMAIL_USER, GMAIL_PASS)
                          smtp.send_message(mensaje)
                      print(f"‚úÖ Correo enviado por alerta en {ciudad_afectada}")
                  except Exception as e:
                      print(f"‚ùå Error al enviar correo: {e}")
          EOF
